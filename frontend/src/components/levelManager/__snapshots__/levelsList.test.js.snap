// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The level manager Matches the current snapshot if a level is being renamed 1`] = `
<styled.div>
  <styled.div>
    <sortableList(styled.ul)
      axis="y"
      distance={5}
      getHelperDimensions={[Function]}
      helperClass="drag-cursor"
      hideSortableGhost={true}
      lockAxis="y"
      lockOffset="50%"
      lockToContainerEdges={true}
      onSortEnd={[Function]}
      pressDelay={0}
      pressThreshold={5}
      shouldCancelStart={[Function]}
      transitionDuration={300}
      useWindowAsScrollContainer={false}
    >
      <sortableElement(Connect(Level))
        collection={0}
        id="1"
        index={0}
        isCurrent={true}
        isSelected={true}
        key="1"
        name="Test level 1"
        position={1}
        renamingValue="New name"
        stars={
          Array [
            1,
            2,
            3,
          ]
        }
        tiles={
          Array [
            Object {
              "position": 0,
              "selectedTileId": 2,
            },
            Object {
              "position": 1,
              "selectedTileId": 3,
            },
            Object {
              "position": 2,
              "selectedTileId": 0,
            },
          ]
        }
      >
        Test level 1
      </sortableElement(Connect(Level))>
      <sortableElement(Connect(Level))
        collection={0}
        id="2"
        index={1}
        isCurrent={false}
        isSelected={false}
        key="2"
        name="Test level 2"
        position={2}
        renamingValue={null}
        stars={
          Array [
            1,
            2,
            3,
          ]
        }
        tiles={
          Array [
            Object {
              "position": 0,
              "selectedTileId": 2,
            },
            Object {
              "position": 1,
              "selectedTileId": 3,
            },
            Object {
              "position": 2,
              "selectedTileId": 0,
            },
          ]
        }
      >
        Test level 2
      </sortableElement(Connect(Level))>
      <sortableElement(Connect(Level))
        collection={0}
        id="3"
        index={2}
        isCurrent={false}
        isSelected={false}
        key="3"
        name="Test level 3"
        position={3}
        renamingValue={null}
        stars={
          Array [
            1,
            2,
            3,
          ]
        }
        tiles={
          Array [
            Object {
              "position": 0,
              "selectedTileId": 2,
            },
            Object {
              "position": 1,
              "selectedTileId": 3,
            },
            Object {
              "position": 2,
              "selectedTileId": 0,
            },
          ]
        }
      >
        Test level 3
      </sortableElement(Connect(Level))>
    </sortableList(styled.ul)>
  </styled.div>
</styled.div>
`;

exports[`The level manager Matches the current snapshot if a level is selected 1`] = `
<styled.div>
  <styled.div>
    <sortableList(styled.ul)
      axis="y"
      distance={5}
      getHelperDimensions={[Function]}
      helperClass="drag-cursor"
      hideSortableGhost={true}
      lockAxis="y"
      lockOffset="50%"
      lockToContainerEdges={true}
      onSortEnd={[Function]}
      pressDelay={0}
      pressThreshold={5}
      shouldCancelStart={[Function]}
      transitionDuration={300}
      useWindowAsScrollContainer={false}
    >
      <sortableElement(Connect(Level))
        collection={0}
        id="1"
        index={0}
        isCurrent={true}
        isSelected={true}
        key="1"
        name="Test level 1"
        position={1}
        renamingValue={null}
        stars={
          Array [
            1,
            2,
            3,
          ]
        }
        tiles={
          Array [
            Object {
              "position": 0,
              "selectedTileId": 2,
            },
            Object {
              "position": 1,
              "selectedTileId": 3,
            },
            Object {
              "position": 2,
              "selectedTileId": 0,
            },
          ]
        }
      >
        Test level 1
      </sortableElement(Connect(Level))>
      <sortableElement(Connect(Level))
        collection={0}
        id="2"
        index={1}
        isCurrent={false}
        isSelected={false}
        key="2"
        name="Test level 2"
        position={2}
        renamingValue={null}
        stars={
          Array [
            1,
            2,
            3,
          ]
        }
        tiles={
          Array [
            Object {
              "position": 0,
              "selectedTileId": 2,
            },
            Object {
              "position": 1,
              "selectedTileId": 3,
            },
            Object {
              "position": 2,
              "selectedTileId": 0,
            },
          ]
        }
      >
        Test level 2
      </sortableElement(Connect(Level))>
      <sortableElement(Connect(Level))
        collection={0}
        id="3"
        index={2}
        isCurrent={false}
        isSelected={false}
        key="3"
        name="Test level 3"
        position={3}
        renamingValue={null}
        stars={
          Array [
            1,
            2,
            3,
          ]
        }
        tiles={
          Array [
            Object {
              "position": 0,
              "selectedTileId": 2,
            },
            Object {
              "position": 1,
              "selectedTileId": 3,
            },
            Object {
              "position": 2,
              "selectedTileId": 0,
            },
          ]
        }
      >
        Test level 3
      </sortableElement(Connect(Level))>
    </sortableList(styled.ul)>
  </styled.div>
</styled.div>
`;

exports[`The level manager Matches the current snapshot if a level is the current level 1`] = `
<styled.div>
  <styled.div>
    <sortableList(styled.ul)
      axis="y"
      distance={5}
      getHelperDimensions={[Function]}
      helperClass="drag-cursor"
      hideSortableGhost={true}
      lockAxis="y"
      lockOffset="50%"
      lockToContainerEdges={true}
      onSortEnd={[Function]}
      pressDelay={0}
      pressThreshold={5}
      shouldCancelStart={[Function]}
      transitionDuration={300}
      useWindowAsScrollContainer={false}
    >
      <sortableElement(Connect(Level))
        collection={0}
        id="1"
        index={0}
        isCurrent={true}
        isSelected={true}
        key="1"
        name="Test level 1"
        position={1}
        renamingValue={null}
        stars={
          Array [
            1,
            2,
            3,
          ]
        }
        tiles={
          Array [
            Object {
              "position": 0,
              "selectedTileId": 2,
            },
            Object {
              "position": 1,
              "selectedTileId": 3,
            },
            Object {
              "position": 2,
              "selectedTileId": 0,
            },
          ]
        }
      >
        Test level 1
      </sortableElement(Connect(Level))>
      <sortableElement(Connect(Level))
        collection={0}
        id="2"
        index={1}
        isCurrent={false}
        isSelected={false}
        key="2"
        name="Test level 2"
        position={2}
        renamingValue={null}
        stars={
          Array [
            1,
            2,
            3,
          ]
        }
        tiles={
          Array [
            Object {
              "position": 0,
              "selectedTileId": 2,
            },
            Object {
              "position": 1,
              "selectedTileId": 3,
            },
            Object {
              "position": 2,
              "selectedTileId": 0,
            },
          ]
        }
      >
        Test level 2
      </sortableElement(Connect(Level))>
      <sortableElement(Connect(Level))
        collection={0}
        id="3"
        index={2}
        isCurrent={false}
        isSelected={false}
        key="3"
        name="Test level 3"
        position={3}
        renamingValue={null}
        stars={
          Array [
            1,
            2,
            3,
          ]
        }
        tiles={
          Array [
            Object {
              "position": 0,
              "selectedTileId": 2,
            },
            Object {
              "position": 1,
              "selectedTileId": 3,
            },
            Object {
              "position": 2,
              "selectedTileId": 0,
            },
          ]
        }
      >
        Test level 3
      </sortableElement(Connect(Level))>
    </sortableList(styled.ul)>
  </styled.div>
</styled.div>
`;

exports[`The level manager Matches the current snapshot if the was an issue communicating with the server 1`] = `
<styled.div>
  <Styled(styled.div)>
    <styled.p
      className="no-levels"
    >
      No levels found
    </styled.p>
  </Styled(styled.div)>
</styled.div>
`;

exports[`The level manager Matches the current snapshot when loading levels from the server 1`] = `
<styled.div>
  <Styled(styled.div)>
    <styled.p
      className="no-levels"
    >
      No levels found
    </styled.p>
  </Styled(styled.div)>
</styled.div>
`;

exports[`The level manager Matches the current snapshot with levels 1`] = `
<styled.div>
  <styled.div>
    <sortableList(styled.ul)
      axis="y"
      distance={5}
      getHelperDimensions={[Function]}
      helperClass="drag-cursor"
      hideSortableGhost={true}
      lockAxis="y"
      lockOffset="50%"
      lockToContainerEdges={true}
      onSortEnd={[Function]}
      pressDelay={0}
      pressThreshold={5}
      shouldCancelStart={[Function]}
      transitionDuration={300}
      useWindowAsScrollContainer={false}
    >
      <sortableElement(Connect(Level))
        collection={0}
        id="1"
        index={0}
        isCurrent={true}
        isSelected={true}
        key="1"
        name="Test level 1"
        position={1}
        renamingValue={null}
        stars={
          Array [
            1,
            2,
            3,
          ]
        }
        tiles={
          Array [
            Object {
              "position": 0,
              "selectedTileId": 2,
            },
            Object {
              "position": 1,
              "selectedTileId": 3,
            },
            Object {
              "position": 2,
              "selectedTileId": 0,
            },
          ]
        }
      >
        Test level 1
      </sortableElement(Connect(Level))>
      <sortableElement(Connect(Level))
        collection={0}
        id="2"
        index={1}
        isCurrent={false}
        isSelected={false}
        key="2"
        name="Test level 2"
        position={2}
        renamingValue={null}
        stars={
          Array [
            1,
            2,
            3,
          ]
        }
        tiles={
          Array [
            Object {
              "position": 0,
              "selectedTileId": 2,
            },
            Object {
              "position": 1,
              "selectedTileId": 3,
            },
            Object {
              "position": 2,
              "selectedTileId": 0,
            },
          ]
        }
      >
        Test level 2
      </sortableElement(Connect(Level))>
      <sortableElement(Connect(Level))
        collection={0}
        id="3"
        index={2}
        isCurrent={false}
        isSelected={false}
        key="3"
        name="Test level 3"
        position={3}
        renamingValue={null}
        stars={
          Array [
            1,
            2,
            3,
          ]
        }
        tiles={
          Array [
            Object {
              "position": 0,
              "selectedTileId": 2,
            },
            Object {
              "position": 1,
              "selectedTileId": 3,
            },
            Object {
              "position": 2,
              "selectedTileId": 0,
            },
          ]
        }
      >
        Test level 3
      </sortableElement(Connect(Level))>
    </sortableList(styled.ul)>
  </styled.div>
</styled.div>
`;

exports[`The level manager Matches the current snapshot with no levels 1`] = `
<styled.div>
  <Styled(styled.div)>
    <styled.p
      className="no-levels"
    >
      No levels found
    </styled.p>
  </Styled(styled.div)>
</styled.div>
`;
